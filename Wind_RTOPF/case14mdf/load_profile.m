function [Pload_profile, Qload_profile] = load_profile(t, nt, bus_no)
%UARK_LOAD_PROFILE  imports load profile data period
%   t:      starting time
%   nt:     time horizon imported
%   bus_no: bus number where the load energy is changed
%   Pload_profile:  Active load profile
%   Qload_profile:  Reactive load profile
%   Yaze Li, University of Arkansas

%% define constants
[CT_LABEL, CT_PROB, CT_TABLE, CT_TBUS, CT_TGEN, CT_TBRCH, CT_TAREABUS, ...
    CT_TAREAGEN, CT_TAREABRCH, CT_ROW, CT_COL, CT_CHGTYPE, CT_REP, ...
    CT_REL, CT_ADD, CT_NEWVAL, CT_TLOAD, CT_TAREALOAD, CT_LOAD_ALL_PQ, ...
    CT_LOAD_FIX_PQ, CT_LOAD_DIS_PQ, CT_LOAD_ALL_P, CT_LOAD_FIX_P, ...
    CT_LOAD_DIS_P, CT_TGENCOST, CT_TAREAGENCOST, CT_MODCOST_F, ...
    CT_MODCOST_X] = idx_ct;
%% import load proflie from t to t+nt-1
% Note that testing set is used for ACOPF
profile = load('profile.mat');
predict = load('predict.mat');
Pload_power = [profile.load_test(t,[1,3,5,7]);predict.load_pre(:,1:nt-1:t+1)'];
Qload_power = [profile.load_test(t,[2,4,6,8]);predict.load_pre(:,1:nt-1:t+1)'];
% Construct load profile structure
% Change Q first by change PQ since MOST can not change Q
Qload_profile = struct( ...
    'type', 'mpcData', ...
    'table', CT_TLOAD, ...
    'rows', bus_no, ...
    'col', CT_LOAD_ALL_PQ, ...
    'chgtype', CT_REP, ...
    'values', [] );
Qload_profile.values(:, 1, :) = Qload_power;
% Change P
Pload_profile = struct( ...
    'type', 'mpcData', ...
    'table', CT_TLOAD, ...
    'rows', bus_no, ...
    'col', CT_LOAD_ALL_P, ...
    'chgtype', CT_REP, ...
    'values', [] );
Pload_profile.values(:, 1, :) = Pload_power;
